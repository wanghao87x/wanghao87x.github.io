<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-18T23:02:26+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Code Code Code</title><subtitle>A great note for C++, OS, Redis, ElasticSearch and so on.</subtitle><entry><title type="html">leetcode-2530.执行K次操作后的最大分数</title><link href="http://localhost:4000/rank/2023/10/18/leetcode-2530.%E6%89%A7%E8%A1%8CK%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0.html" rel="alternate" type="text/html" title="leetcode-2530.执行K次操作后的最大分数" /><published>2023-10-18T22:47:46+08:00</published><updated>2023-10-18T22:47:46+08:00</updated><id>http://localhost:4000/rank/2023/10/18/leetcode-2530.%E6%89%A7%E8%A1%8CK%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0</id><content type="html" xml:base="http://localhost:4000/rank/2023/10/18/leetcode-2530.%E6%89%A7%E8%A1%8CK%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0.html"><![CDATA[<p><a href="https://leetcode.cn/problems/maximal-score-after-applying-k-operations/description/">题目链接</a></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">maxKelements</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nums</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

        <span class="kt">long</span> <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">t</span><span class="p">;</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">((</span><span class="n">t</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>关键点：</p>

<ol>
  <li>优先队列：std::priority_queue
    <ol>
      <li>cppreference: <a href="https://en.cppreference.com/w/cpp/container/priority_queue">std::priority_queue</a></li>
      <li>priority_queue是一个容器适配器，由堆来实现；</li>
      <li>以对数时间复杂度插入和提取为代价，提供常数时间的查找</li>
      <li>可提供一个比较函数来改变顺序，比如以<code class="language-plaintext highlighter-rouge">std::greater&lt;T&gt;</code>为比较函数时，队头元素就是最小的元素</li>
    </ol>
  </li>
  <li>向上取整(t+2)</li>
</ol>]]></content><author><name></name></author><category term="Rank" /><summary type="html"><![CDATA[题目链接]]></summary></entry><entry><title type="html">acwing 29.删除链表中重复的节点</title><link href="http://localhost:4000/rank/2023/10/18/acwing-29.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E8%8A%82%E7%82%B9.html" rel="alternate" type="text/html" title="acwing 29.删除链表中重复的节点" /><published>2023-10-18T16:36:49+08:00</published><updated>2023-10-18T16:36:49+08:00</updated><id>http://localhost:4000/rank/2023/10/18/acwing-29.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E8%8A%82%E7%82%B9</id><content type="html" xml:base="http://localhost:4000/rank/2023/10/18/acwing-29.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E8%8A%82%E7%82%B9.html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/27/">题目链接</a></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
* @acwing app=acwing.cn id=27 lang=C++
*
* 29. 删除链表中重复的节点
*/</span>

<span class="c1">// @acwing code start</span>

<span class="cm">/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */</span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">ListNode</span><span class="o">*</span> <span class="n">deleteDuplication</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 首先创建一个 dummy 节点，它的 next 指向头节点，用于保存头节点</span>
      <span class="n">ListNode</span><span class="o">*</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
      <span class="n">dummy</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>

      <span class="c1">//我们创建一个 p 节点，用于遍历链表，在遍历中我们要删掉重复的值</span>
      <span class="n">ListNode</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">dummy</span><span class="p">;</span>
      <span class="c1">// 循环遍历到表尾（p-&gt;next指向 nullptr 就结束了）</span>
      <span class="k">while</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 这一部分是用来找到重复的值</span>
        <span class="c1">// 需要借助一个指针来探测后面的节点值是否与 p-&gt;next相同</span>
        <span class="c1">// 一开始它指向当前遍历节点的下一个节点</span>
        <span class="c1">// 如果 q 节点的值与p-&gt;next相等则向后遍历去探测下一个节点，直到该节点的值与 p-&gt;next 不相同</span>
        <span class="c1">// 那么现在 q 指向的节点就是第一个与 p-&gt;next-&gt;val 不相同的节点</span>
        <span class="n">ListNode</span><span class="o">*</span> <span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">q</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">==</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 如果没有重复节点的话，q 节点在探测过后当前应该处于 p-&gt;next-&gt;next 的位置</span>
        <span class="c1">// （因为 q 是和 p-&gt;next 比较的，q 至少要在 p-&gt;next-&gt;next）</span>
        <span class="c1">// 没有重复节点的话 p 就向后遍历，再进入循环去遍历探测下一个节点后的节点有没有重复的</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="n">q</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="c1">// 如果有重复节点，q 现在指向的位置就是跳过了重复段的第一个节点，就让 p 的下一个节点指向 q 继续遍历</span>
          <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="n">dummy</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// @acwing code end</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Rank" /><summary type="html"><![CDATA[题目链接]]></summary></entry><entry><title type="html">第一条</title><link href="http://localhost:4000/%E4%BE%BF%E7%AD%BE/2023/10/18/%E7%AC%AC%E4%B8%80%E6%9D%A1.html" rel="alternate" type="text/html" title="第一条" /><published>2023-10-18T16:05:49+08:00</published><updated>2023-10-18T16:05:49+08:00</updated><id>http://localhost:4000/%E4%BE%BF%E7%AD%BE/2023/10/18/%E7%AC%AC%E4%B8%80%E6%9D%A1</id><content type="html" xml:base="http://localhost:4000/%E4%BE%BF%E7%AD%BE/2023/10/18/%E7%AC%AC%E4%B8%80%E6%9D%A1.html"><![CDATA[<p>人每天都会生产很多垃圾，对的，没有经过整理的东西都是垃圾，但好消息是这些垃圾是可回收的。我想这是一个让我的垃圾变废为宝的地方了。</p>

<p>这个 site 简单纯粹，只有文字图片，这种感觉非常好。如果不喜欢的话可以看看另一个<a href="http://uneed.work/">空间</a>。</p>]]></content><author><name></name></author><category term="便签" /><summary type="html"><![CDATA[人每天都会生产很多垃圾，对的，没有经过整理的东西都是垃圾，但好消息是这些垃圾是可回收的。我想这是一个让我的垃圾变废为宝的地方了。]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2023/10/17/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-10-17T17:07:28+08:00</published><updated>2023-10-17T17:07:28+08:00</updated><id>http://localhost:4000/jekyll/update/2023/10/17/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/10/17/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>